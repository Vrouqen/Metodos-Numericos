import tkinter as tk
from tkinter import messagebox
import Unidad1

def opcion1():
    def calcular_error_absoluto():
        varReal = float(valor_real_entry.get())
        varAprox = float(valor_aprox_entry.get())
        errorAbs = Unidad1.calcularErrorAbsoluto(varReal, varAprox)
        messagebox.showinfo("Resultado", f"El error absoluto es: {errorAbs}")

    def calcular_error_relativo():
        varReal = float(valor_real_entry.get())
        varAprox = float(valor_aprox_entry.get())
        errorRel = Unidad1.calcularErrorRelativo(varReal, varAprox)
        messagebox.showinfo("Resultado", f"El error relativo es: {errorRel}")

    def regresar():
        error_absoluto_frame.pack_forget()
        error_relativo_frame.pack_forget()
        menu_frame.pack()

    menu_frame.pack_forget()
    error_absoluto_frame = tk.Frame(root)
    error_absoluto_frame.pack()

    valor_real_label = tk.Label(error_absoluto_frame, text="Ingrese el valor real:")
    valor_real_label.pack()
    valor_real_entry = tk.Entry(error_absoluto_frame)
    valor_real_entry.pack()

    valor_aprox_label = tk.Label(error_absoluto_frame, text="Ingrese el valor aproximado:")
    valor_aprox_label.pack()
    valor_aprox_entry = tk.Entry(error_absoluto_frame)
    valor_aprox_entry.pack()

    calcular_error_absoluto_button = tk.Button(error_absoluto_frame, text="Calcular error absoluto",
                                              command=calcular_error_absoluto)
    calcular_error_absoluto_button.pack()

    calcular_error_relativo_button = tk.Button(error_absoluto_frame, text="Calcular error relativo",
                                              command=calcular_error_relativo)
    calcular_error_relativo_button.pack()

    regresar_button = tk.Button(error_absoluto_frame, text="Regresar", command=regresar)
    regresar_button.pack()

def opcion2():
    def convertir_binario_a_decimal():
        binario = binario_entry.get()
        decimal = Unidad1.convertirBinarioToDecimal(binario)
        messagebox.showinfo("Resultado", f"El valor en decimal es: {decimal}")

    def convertir_decimal_a_binario():
        decimal = float(decimal_entry.get())
        binario = Unidad1.convertirDecimalToBinario(decimal)
        messagebox.showinfo("Resultado", f"El valor en binario es: {binario}")

    def convertir_hexadecimal_a_decimal():
        hexadecimal = hexadecimal_entry.get()
        decimal = Unidad1.convertirHexadecimalToDecimal(hexadecimal)
        messagebox.showinfo("Resultado", f"El valor en decimal es: {decimal}")

    def convertir_octal_a_decimal():
        octal = int(octal_entry.get())
        decimal = Unidad1.convertirOctalToDecimal(octal)
        messagebox.showinfo("Resultado", f"El valor en decimal es: {decimal}")

    def regresar():
        binario_decimal_frame.pack_forget()
        decimal_binario_frame.pack_forget()
        hexadecimal_decimal_frame.pack_forget()
        octal_decimal_frame.pack_forget()
        menu_frame.pack()

    menu_frame.pack_forget()
    sistemas_numeracion_frame = tk.Frame(root)
    sistemas_numeracion_frame.pack()

    binario_decimal_frame = tk.Frame(sistemas_numeracion_frame)
    decimal_binario_frame = tk.Frame(sistemas_numeracion_frame)
    hexadecimal_decimal_frame = tk.Frame(sistemas_numeracion_frame)
    octal_decimal_frame = tk.Frame(sistemas_numeracion_frame)

    binario_decimal_frame.pack()
    decimal_binario_frame.pack()
    hexadecimal_decimal_frame.pack()
    octal_decimal_frame.pack()

    # Binario a decimal
    binario_label = tk.Label(binario_decimal_frame, text="Ingrese el número binario:")
    binario_label.pack()
    binario_entry = tk.Entry(binario_decimal_frame)
    binario_entry.pack()
    binario_decimal_button = tk.Button(binario_decimal_frame, text="Convertir a decimal",
                                       command=convertir_binario_a_decimal)
    binario_decimal_button.pack()

    # Decimal a binario
    decimal_label = tk.Label(decimal_binario_frame, text="Ingrese el número decimal:")
    decimal_label.pack()
    decimal_entry = tk.Entry(decimal_binario_frame)
    decimal_entry.pack()
    decimal_binario_button = tk.Button(decimal_binario_frame, text="Convertir a binario",
                                       command=convertir_decimal_a_binario)
    decimal_binario_button.pack()

    # Hexadecimal a decimal
    hexadecimal_label = tk.Label(hexadecimal_decimal_frame, text="Ingrese el número hexadecimal:")
    hexadecimal_label.pack()
    hexadecimal_entry = tk.Entry(hexadecimal_decimal_frame)
    hexadecimal_entry.pack()
    hexadecimal_decimal_button = tk.Button(hexadecimal_decimal_frame, text="Convertir a decimal",
                                           command=convertir_hexadecimal_a_decimal)
    hexadecimal_decimal_button.pack()

    # Octal a decimal
    octal_label = tk.Label(octal_decimal_frame, text="Ingrese el número octal:")
    octal_label.pack()
    octal_entry = tk.Entry(octal_decimal_frame)
    octal_entry.pack()
    octal_decimal_button = tk.Button(octal_decimal_frame, text="Convertir a decimal",
                                     command=convertir_octal_a_decimal)
    octal_decimal_button.pack()

    regresar_button = tk.Button(sistemas_numeracion_frame, text="Regresar", command=regresar)
    regresar_button.pack()

def opcion3():
    def convertir_a_ieee_32_bits():
        numDecimal = float(decimal_entry.get())
        numIEEE32 = Unidad1.convertirIEE754_32bits(numDecimal)
        messagebox.showinfo("Resultado", f"El número transformado es: {numIEEE32}")

    def convertir_a_ieee_64_bits():
        numDecimal = float(decimal_entry.get())
        numIEEE64 = Unidad1.convertirIEE754_64bits(numDecimal)
        messagebox.showinfo("Resultado", f"El número transformado es: {numIEEE64}")

    def regresar():
        ieee_32_bits_frame.pack_forget()
        ieee_64_bits_frame.pack_forget()
        menu_frame.pack()

    menu_frame.pack_forget()
    punto_flotante_frame = tk.Frame(root)
    punto_flotante_frame.pack()

    ieee_32_bits_frame = tk.Frame(punto_flotante_frame)
    ieee_64_bits_frame = tk.Frame(punto_flotante_frame)

    ieee_32_bits_frame.pack()
    ieee_64_bits_frame.pack()

    # IEEE 32 bits
    ieee_32_bits_button = tk.Button(ieee_32_bits_frame, text="Transformar a formato IEEE 32 bits",
                                    command=convertir_a_ieee_32_bits)
    ieee_32_bits_button.pack()

    # IEEE 64 bits
    ieee_64_bits_button = tk.Button(ieee_64_bits_frame, text="Transformar a formato IEEE 64 bits",
                                    command=convertir_a_ieee_64_bits)
    ieee_64_bits_button.pack()

    regresar_button = tk.Button(punto_flotante_frame, text="Regresar", command=regresar)
    regresar_button.pack()

def opcion4():
    def calcular_ecuacion():
        num = float(valor_x_entry.get())
        respuesta = Unidad1.solucionDeEcuacion(num)
        messagebox.showinfo("Resultado", f"El resultado de la ecuación es: {respuesta}")

    def mostrar_grafica():
        max_value = valor_max_entry.get()
        try:
            max_value = float(max_value)
            if max_value > 1:
                Unidad1.graficaDeEcuacion(max_value)
            else:
                messagebox.showerror("Error", "No se admiten valores menores que uno")
        except ValueError:
            messagebox.showerror("Error", "El valor máximo debe ser numérico.")

    def regresar():
        calculo_ecuacion_frame.pack_forget()
        grafica_frame.pack_forget()
        menu_frame.pack()

    menu_frame.pack_forget()
    propagacion_errores_frame = tk.Frame(root)
    propagacion_errores_frame.pack()

    calculo_ecuacion_frame = tk.Frame(propagacion_errores_frame)
    grafica_frame = tk.Frame(propagacion_errores_frame)

    calculo_ecuacion_frame.pack()
    grafica_frame.pack()

    # Cálculo de la ecuación
    valor_x_label = tk.Label(calculo_ecuacion_frame, text="Ingrese el valor de x:")
    valor_x_label.pack()
    valor_x_entry = tk.Entry(calculo_ecuacion_frame)
    valor_x_entry.pack()
    calculo_ecuacion_button = tk.Button(calculo_ecuacion_frame, text="Calcular ecuación",
                                        command=calcular_ecuacion)
    calculo_ecuacion_button.pack()

    # Mostrar gráfica
    valor_max_label = tk.Label(grafica_frame, text="Ingrese hasta qué valor de x será la gráfica:")
    valor_max_label.pack()
    valor_max_entry = tk.Entry(grafica_frame)
    valor_max_entry.pack()
    mostrar_grafica_button = tk.Button(grafica_frame, text="Mostrar gráfica", command=mostrar_grafica)
    mostrar_grafica_button.pack()

    regresar_button = tk.Button(propagacion_errores_frame, text="Regresar", command=regresar)
    regresar_button.pack()

def mostrar_menu():
    def seleccionar_opcion():
        opcion = opcion_var.get()
        if opcion == "1":
            opcion1()
        elif opcion == "2":
            opcion2()
        elif opcion == "3":
            opcion3()
        elif opcion == "4":
            opcion4()
        elif opcion == "5":
            pass
        elif opcion == "6":
            pass
        elif opcion == "0":
            root.destroy()
        else:
            messagebox.showerror("Error", "Opción inválida. Por favor, selecciona una opción válida.")

    menu_frame = tk.Frame(root)
    menu_frame.pack()

    opcion_var = tk.StringVar()

    titulo_label = tk.Label(menu_frame, text="======= MENÚ =======")
    titulo_label.pack()

    opcion1_radio = tk.Radiobutton(menu_frame, text="1. Cálculo de errores", variable=opcion_var, value="1")
    opcion1_radio.pack()

    opcion2_radio = tk.Radiobutton(menu_frame, text="2. Sistemas de numeración", variable=opcion_var, value="2")
    opcion2_radio.pack()

    opcion3_radio = tk.Radiobutton(menu_frame, text="3. Punto flotante", variable=opcion_var, value="3")
    opcion3_radio.pack()

    opcion4_radio = tk.Radiobutton(menu_frame, text="4. Propagación de errores", variable=opcion_var, value="4")
    opcion4_radio.pack()

    opcion5_radio = tk.Radiobutton(menu_frame, text="5. Ecuaciones lineales", variable=opcion_var, value="5")
    opcion5_radio.pack()

    opcion6_radio = tk.Radiobutton(menu_frame, text="6. Ecuaciones no lineales", variable=opcion_var, value="6")
    opcion6_radio.pack()

    salir_radio = tk.Radiobutton(menu_frame, text="0. Salir", variable=opcion_var, value="0")
    salir_radio.pack()

    seleccionar_button = tk.Button(menu_frame, text="Seleccionar", command=seleccionar_opcion)
    seleccionar_button.pack()


root = tk.Tk()
root.title("Cálculos numéricos")
mostrar_menu()
root.mainloop()
